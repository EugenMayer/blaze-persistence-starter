buildscript {
    ext {
        // see https://www.jetbrains.com/help/idea/annotating-source-code.html
        // @see https://mvnrepository.com/artifact/org.jetbrains/annotations
        jetbrainsAnnoations = '21.0.1'

        // @see https://mvnrepository.com/artifact/org.modelmapper/modelmapper
        modelMapper = '2.4.4'

        // @see https://mvnrepository.com/artifact/org.codehaus.groovy/groovy
        groovy = "3.0.8"

        // @see https://mvnrepository.com/artifact/org.projectlombok/lombok
        lombokVersion = '1.18.20'

        // @see https://mvnrepository.com/artifact/org.mockito/mockito-core
        mockitoVersion = '3.11.0'

        // @see https://mvnrepository.com/artifact/commons-io/commons-io
        commonsIo = '2.8.0'

        // @see https://mvnrepository.com/artifact/com.google.guava/guava
        googleGuava = '30.1.1-jre'

        // javax.annotation needed when compiling against > Java 8 since it is no longer included
        // @see https://mvnrepository.com/artifact/javax.annotation/javax.annotation-api
        javaxAnnotations = '1.3.2'

        // @see // https://mvnrepository.com/artifact/com.blazebit/blaze-persistence-core-api
        //blazePersistence = '9.30-SNAPSHOT'
        blazePersistence = '1.6.0'

        // @see https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
        log4j2Version = '2.14.1'
    }
}

plugins {
    id 'java'
    id 'java-library'

    // @see https://docs.gradle.org/current/userguide/idea_plugin.html
    id 'idea'

    // @see https://mvnrepository.com/artifact/org.springframework.boot/spring-boot
    // Changing that will upgrade spring to the corresponding version
    id 'org.springframework.boot' version '2.5.1'

    // much better output during running tests
    // @see https://plugins.gradle.org/plugin/com.adarshr.test-logger
    // see https://github.com/radarsh/gradle-test-logger-plugin for configuration options
    id "com.adarshr.test-logger" version "3.0.0"
}


configurations {
    compileOnly {
        // If we enable this, we will rebuild the entire project everytime we change anything, not compile cache
        // extendsFrom annotationProcessor
    }
    developmentOnly {}
    runtimeClasspath {
        extendsFrom developmentOnly
    }

    // needed to get lombok working in our tests
    testImplementation {
        extendsFrom annotationProcessor
        // we do not need junit5 asserts / integrations, remove for more auto include convenience
        exclude module: 'junit'
    }

    // Exclude Springs default logging framework since we use Log4j2
    all*.exclude module: 'spring-boot-starter-logging'
    all*.exclude module: 'logback-classic'
}

// this will help us auto-picking all spring boot dependency versions for us
apply plugin: 'io.spring.dependency-management'

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()

    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots'
    }
}

dependencies {
    implementation(
            "org.springframework.boot:spring-boot-starter-web",
            "org.springframework.boot:spring-boot-starter-integration",
            "org.springframework.boot:spring-boot-starter-data-jpa",
            "org.codehaus.groovy:groovy:$groovy",

            // 3rd party licenses
            "com.google.guava:guava:$googleGuava",
            "org.jetbrains:annotations:$jetbrainsAnnoations",
            "org.modelmapper:modelmapper:$modelMapper",
            "com.h2database:h2",
    )

    // ************************************* blaze persistence  **************************
    implementation(
            "com.blazebit:blaze-persistence-integration-spring-data-2.4:${blazePersistence}",
            // needed for deserialization support for RequestBodies
            "com.blazebit:blaze-persistence-integration-hibernate-5.4:${blazePersistence}",
            "com.blazebit:blaze-persistence-core-impl:${blazePersistence}",
    )

    // ****************************************  tests / dev **************************
    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude group: "org.junit.vintage", module: "junit-vintage-engine"
    }
    testImplementation(
            "org.junit.jupiter:junit-jupiter-api",
            "org.junit.jupiter:junit-jupiter-params",
            "org.mockito:mockito-core:$mockitoVersion",
            "org.mockito:mockito-junit-jupiter:$mockitoVersion",
            "com.h2database:h2"
    )
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")

    // ********************** all our code generators************************
    annotationProcessor(
            "com.blazebit:blaze-persistence-entity-view-processor:${blazePersistence}",
            "javax.annotation:javax.annotation-api:$javaxAnnotations",
            "org.projectlombok:lombok:$lombokVersion"
    )

    testAnnotationProcessor(
            "com.blazebit:blaze-persistence-entity-view-processor:${blazePersistence}",
            "org.projectlombok:lombok:$lombokVersion",
    )

    compileOnly(
            "org.projectlombok:lombok:$lombokVersion",
            "org.springframework.boot:spring-boot-configuration-processor",
    )


    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.1'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1-jre'
}


tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
